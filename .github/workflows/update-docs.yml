name: Update Changelog and README

on:
  push:
    branches:
      - main

jobs:
  update-docs:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Git configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract current version from README.md
        id: extract_version
        run: |
          CURRENT_VERSION=$(grep -Eo 'Version: [0-9]+\.[0-9]+\.[0-9]+' README.md | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$CURRENT_VERSION" ]; then
            echo "No version found in README.md, defaulting to 0.0.0"
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version (patch)
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.current_version }}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog entry
        id: generate_changelog
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.current_version }}"
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          PREV_TAG="v$CURRENT_VERSION"
          if git rev-parse "$PREV_TAG" >/dev/null 2>&1; then
            COMMITS=$(git log "$PREV_TAG"..HEAD --pretty=format:"- %s")
          else
            COMMITS=$(git log --pretty=format:"- %s")
          fi
          DATE=$(date +'%Y-%m-%d')
          {
            echo "## [$NEW_VERSION] - $DATE"
            echo ""
            echo "$COMMITS"
            echo ""
          } > changelog-entry.txt
          if [ -f CHANGELOG.md ]; then
            cat changelog-entry.txt CHANGELOG.md > CHANGELOG.new.md
          else
            cp changelog-entry.txt CHANGELOG.new.md
          fi
          mv CHANGELOG.new.md CHANGELOG.md

      - name: Update version in README.md
        run: |
          CURRENT_VERSION="${{ steps.extract_version.outputs.current_version }}"
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          sed -i "s/Version: $CURRENT_VERSION/Version: $NEW_VERSION/" README.md

      - name: Commit and push changes
        run: |
          git add CHANGELOG.md README.md
          git commit -m "chore: update changelog and bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git push origin main

      - name: Tag new version
        run: |
          git tag "v${{ steps.bump_version.outputs.new_version }}"
          git push origin "v${{ steps.bump_version.outputs.new_version }}"
